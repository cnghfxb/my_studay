docker

镜像（image）
docker 镜像就好比一个模板，可以通过这个模板来创建容器服务，
tomcat镜像==>run==>tomcat容器（提供服务器）。通过这个镜像可以
创建多个容器（最终服务运行或者项目运行就是在容器中的）
容器（container）
Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的。
启动，停止，删除，基本命令
可以把这个容器理解是一个简易的linux 系统。
仓库（repository）
仓库就是存放镜像的地方
仓库分为公有仓库和私有仓库
Docker Hub （默认是国外的）

安装Docker  (CentOS 7)
1.yum -y install gcc
2.yum -y install gcc-c++
3.卸载旧版本 ：yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine
4.安装: 
 4.1 安装依赖包： yum install -y yum-utils device-mapper-persistent-data lvm2
 4.2 设置镜像仓库： 
     yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     或
	 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
 4.3更新yum软件包索引： yum makecache fast
 4.4 安装docker 的指令：
     yum install docker-ce docker-ce-cli containerd.io
 4.4 测试是否安装成功
     docker run hello-docker
     若出现：，安装成功。

     若不成功，CentOS 7可以尝试打开daemon.json文件：vi /etc/docker/daemon.json
     在里面输入阿里云镜像配置：
     {
      "registry-mirrors":["https://6kx4zyno.mirror.aliyuncs.com"]
     }

5.查看版本
   docker version
6.查看镜像
   docker images
7.卸载docker
   yum remove docker-ce docker-ce-cli containerd.io
8.删除资源
    rm -rf /var/lib/docker   (docker默认的工作路径)

9.docker run hello-world 的启动流程
   1.在本机寻找镜像
   2.判断本机是否有这个镜像
   3.如果有，则使用这个镜像
   4.如果没有，就Docker Hub 上下载
   5.判断Docker Hub 是否可以找到
   6.如果找到，则下载到本地
   7.如果没有，则返回错误，找不到镜像
10.Docker 启动，重启
   1. systemctl start docker
   2. systemctl restart docker


11.命令
  1.容器命令
    说明：只有有了镜像才能创建容器，首先下载一个centos 镜像来学习
    下载镜像 docker pull centos
    删除所有镜像 docker rmi -f $(docker images -qa)
   1.1 新建容器并启动
      docker run [可选参数] image
      参数说明：
            --name="Name"  容器名字 tomcat01 tomcat02 ,用来区分容器
            -d             后台方式运行
            -it            使用交互方式运行，进入容器查看内容
            -p             指定容器的端口   -p 8080:8080
                   -p 主机端口:容器端口 （常用）
                   -p 容器端口
                   容器端口

	        -P             随机指定端口

       测试：
           docker images
           docker run -it centos /bin/bash

           推出： exit
   1.2列出所有在运行的容器
      docker ps     列出当前正在运行的容器
      docker ps -a  列出当前正在运行的容器+曾经运行过的容器
      docker ps -n  显示最近创建的容器
      docker ps -q     只显示容器的编号
   1.3 退出容器
   　　exit　        直接容器停止并且退出
      Ctrl + P +Q 　容器不停止退出
   1.4删除容器
      docker rm 容器id                删除指定的容器，不能删除正在运行的容器，如果要强制删除，rm -f
      docker rm -f $(docker ps -aq)  删除所有容器
   1.5启动和停止容器
      docker start 容器id             启动容器
      docker restart 容器id           重启容器
      docker stop 容器id              停止当前正在执行的容器
      docker kill 容器id              强制停止当前容器
12.列出所有正在运行的进程
      docker ps -s
13.查看镜像的元数据
      docker inspect 镜像id
14.进入当前正在运行的容器
    方式一:
      docker exec -it 容器id bashshell
    方式二:
      docker attach 容器id

    区别:
    docker exec :进入容器后开启一个新的终端，可以在里面操作 （常用）
    docker attach : 进入正在运行的终端，不会启动新的进程
15.拷贝容器中的文件到宿主机
    docker cdp 容器id:容器文件路径 宿主机文件路径
    测试:
        docker cp 685a00fb5e93:/home/test.java /home

16.docker 部署nginx
    1.安装
     docker pull nginx
    2.启动
      -d:后台启动，--name:附名，宿主机端口:容器端口
      docker run -d --name nginx01 -p 3344:80 nginx
    3.本机自测
      curl localhost:3344
    4.进入nginx 容器
      docker exec -it nginx01 /bin/bash
17.docker 部署tomcat
    1.安装
    docker pull tomcat
    2.启动
    docker run -d --name tomcat01 -p 3345:8080 tomcat
    3.测试
      注意，docker命令下载的tomcat 是一个精简版，在webapps 中是没有任何项目的，我们需要将tomcat 中的webapps.dist 复制到webapps 中，用于测试
      cp -r webapps.dist/* webapps
      然后外网请求宿主机的端口，就能看到tomcat 的画面
18.可视化
    1.portainer
    docker run -d -p 8088:9000 \
    --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer

19.commit 镜像
    docker commit 提交容器成为一个新的副本

    命令和git原理类似
    docker commit -m ""
    测试
       安装,启动默认的tomcat，官方的镜像默认webapps 下是没有文件的
       cp -r webapps.dist/* webapps

       将操作过的容器通过commit提交为一个镜像，以后就可以使用我们修改过的镜像。、
       在宿主机中执行:
       docker ps
       docker commit -a "xuebingfan" -m="add webapps app" eee2599b7113 tomcat02:1.0

       如果想要保存容器的状态，就可以通过commit来提交，获得一个镜像。
 =========================================================================================================
 以上是docker 的入门的阶段
 =========================================================================================================

1.容器数据卷
  容器的持久化和同步操作，容器之间也是可以数据共享的
  1.1 数据卷
  方式一 : 直接使用命令来挂载 -v
   docker run -d -it -v /home/ceshi:/home centos /bin/bash
   启动成功后，使用inspect 命令来查看挂载信息 （Mounts）
   Source :主机地址
   Destination : docker 容器内的地址

  1.2.实战：Mysql 同步数据卷
  docker run -d -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -p 3346:3306 -e MYSQL_ROOT_PASSWORD=1q2w3e4r --name mysql01 mysql:5.7
  操作上面的命令，就能成功下载mysql 镜像并启动，包含了设置挂载路径，设置端口，设置密码，设置容器名称
  测试:
  使用mysql workbench连接， 创建一个数据库，在linux 宿主机中的/home/mysql/data 下查看是否增加了"test"
  假设，我们将容器删除，发现，我们挂载到本地的数据依旧没有丢失，这就是实现了容器数据持久化的功能。
  1.3 具名挂载和匿名挂载
      所有的docker 容器内的卷，没有指定目录的情况下都是在 /var/lib/docker/volumes/xxxx/_data
      我们通过具名挂载的方式方便的找到我们的一个卷，大多数情况下使用的都是具名挂载

      如何确定是具名挂载和匿名挂载?
      -v 容器内路径       : 匿名挂载
      -v 卷名:容器内路径   : 具名挂载
      -v  /宿主机路径:容器内路径   :指定路径挂载

      拓展:
      通过 -v 容器内路径： ro rw 改变读写权限
      ro readonly   :只读
      rw readwrite  :读写

      一旦设置了容器的权限，容器对我们挂载出来的内容就有限定了 (默认是rw)
      docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx:ro nginx
      docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx:rw nginx

      设置了ro， 说明这个路径只能通过宿主机在操作，容器内部是无法操作的！

  1.4 初识dockerfile
      dockerfile 就是用来构建docker 镜像的构建文件！ 命令脚本。

      测试：
      mkdir docker-test-volume
      cd docker-test-volume

      生成一个dockerfile 文件，名字可以随便取，但是通常为dockerfile,通过下面的脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层

            FROM centos

            VOLUME ["/volume01","/volume02"]

            CMD echo "---end---"
            CMD /bin/bash


      使用下面的命令，生成我们自己的镜像：
      docker build -f /home/docker-test-volume/dockerfile1 -t fxb/centos:1.0

      通过测试，可以看到容器里的volume01和volume02 被挂载出去了。
      这种方式使用的非常多，因为我们通常会构建自己的镜像！
      假设构建镜像时没有挂载卷，要手动挂载 -v 卷名:容器内路径


      实战：
      实现mysql 的同步数据

      docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7

      docker run -d -p 3311:3305 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7

      结论：容器之间配置信息的传递，数据容器卷容器的生命周期一直持续到没有容器使用为止。
      但是一旦持久化到了本地，这个时候，本地的数据是不会删除的。
  1.5 dockerfile
      介绍:
      dockerfile 是用来构建docker镜像的文件，命令参数脚本。
      构建步骤：
      1.编写一个dockerfile 文件
      2.docker build 构建成为一个镜像
      3.docker run 运行镜像
      4.docker push 发布镜像 （DockerHub ,阿里云镜像仓库）

      很多官方镜像都是基础包，很多功能都没有，我们通常会根据自己的需求搭建自己的镜像

      dockerfile 构建过程
      基础知识:
      1.每一个保留关键字（指令）都必须使用大写
      2.按照从上到下顺序执行
      3.# 表示注释
      4.每一个指令都会创建提交一个新的镜像层，并提交。

      dockerfile 是面向开发，我们以后要发布项目，做镜像，就要编写dockerfile 文件，这个文件十分简单。
      docker镜像逐渐成为企业交付的标准，必须要掌握
      dockerfile:构建文件，定义了一切的步骤，源代码
      dockerImages :通过dockerfile 构建生成的镜像，最终发布和运行的产品。
      docker容器:容器就是镜像运行起来提供服务器。


      dockerfile 的指令:

      1.FROM            :基础镜像 ，一切从这里开始构建
      2.MAINTAINER      :镜像是谁写的，姓名+邮箱
      3.RUN             :镜像构建时候需要运行的命令
      4.ADD             :步骤：tomcat镜像，这个tomcat 压缩包！添加内容
      5.WORKDIR         :镜像的工作目录
      6.VOLUME          :挂载的目录
      7.EXPOSE          :暴露端口配置
      8.CMD             :指定这个容器启动的时候需要运行的命令，只有最后一个会生效，可以被替代
      8.CMD             :指定这个容器启动的时候需要运行的命令，只有最后一个会生效，可以被替代
      9.ENTRYPOINT      :指定这个容器启动的饿时候需要运行的命令，可以追加命令
      10.ONBUILD        :当构建一个被继承的Dockerfile 这个时候就会运行ONBUILD 的指令，触发指令。
      11.COPY           :类似ADD ，将我们文件拷贝到镜像中
      12.ENV            :构建的时候设置环境变量


      实战测试：
      DOcker Hub中99%de 镜像都是从这个基础镜像scratch 而来的，然后配置需要的软件和配置来进行构建。

      创建一个自己的centos

      编写dockerfile文件:
      FROM centos
      MAINTAINER fxb<814271018@qq.com>

      ENV MYPATH /usr/local
      WORKDIR $MYPATH

      RUN yum -y install vim
      RUN yum -y install net-tools

      EXPOSE 8888

      CMD echo $MYPATH
      CMD echo "---end---"
      CMD /bin/bash

      通过命令创建镜像
      docker build -f mydockerfile-centos -t wxfxb/mycentos:0.1 .

      测试运行我们的镜像:
      docker run -it c3a2450598f5 /bin/bash

      可以发现，启动完成后，直接进入了我们自己配置的WORKDIR :   /usr/local

  1.6 发布镜像
     1.地址https://hub.docker.com/  注册自己的账号 我的账号名是（wxfxb）
     2.在服务器上提交自己的镜像
     3.查看提交镜像的命令
     [root@VM-0-16-centos ~]# docker login --help

     Usage:  docker login [OPTIONS] [SERVER]

     Log in to a Docker registry.
     If no server is specified, the default is defined by the daemon.

     Options:
       -p, --password string   Password
           --password-stdin    Take the password from stdin
       -u, --username string   Username

     4.登录后就可以提交镜像了
     5.提交自己的镜像
     docker push wxfxb/mycentos:0.1
















