docker

镜像（image）
docker 镜像就好比一个模板，可以通过这个模板来创建容器服务，
tomcat镜像==>run==>tomcat容器（提供服务器）。通过这个镜像可以
创建多个容器（最终服务运行或者项目运行就是在容器中的）
容器（container）
Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的。
启动，停止，删除，基本命令
可以把这个容器理解是一个简易的linux 系统。
仓库（repository）
仓库就是存放镜像的地方
仓库分为公有仓库和私有仓库
Docker Hub （默认是国外的）

安装Docker  (CentOS 7)
1.yum -y install gcc
2.yum -y install gcc-c++
3.卸载旧版本 ：yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine
4.安装: 
 4.1 安装依赖包： yum install -y yum-utils device-mapper-persistent-data lvm2
 4.2 设置镜像仓库： 
     yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     或
	 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
 4.3更新yum软件包索引： yum makecache fast
 4.4 安装docker 的指令：
     yum install docker-ce docker-ce-cli containerd.io
 4.4 测试是否安装成功
     docker run hello-docker
     若出现：，安装成功。

     若不成功，CentOS 7可以尝试打开daemon.json文件：vi /etc/docker/daemon.json
     在里面输入阿里云镜像配置：
     {
      "registry-mirrors":["https://6kx4zyno.mirror.aliyuncs.com"]
     }

5.查看版本
   docker version
6.查看镜像
   docker images
7.卸载docker
   yum remove docker-ce docker-ce-cli containerd.io
8.删除资源
    rm -rf /var/lib/docker   (docker默认的工作路径)

9.docker run hello-world 的启动流程
   1.在本机寻找镜像
   2.判断本机是否有这个镜像
   3.如果有，则使用这个镜像
   4.如果没有，就Docker Hub 上下载
   5.判断Docker Hub 是否可以找到
   6.如果找到，则下载到本地
   7.如果没有，则返回错误，找不到镜像
10.Docker 启动，重启
   1. systemctl start docker
   2. systemctl restart docker


11.命令
  1.容器命令
    说明：只有有了镜像才能创建容器，首先下载一个centos 镜像来学习
    docker pull centos
   1.1 新建容器并启动
      docker run [可选参数] image
      参数说明：
            --name="Name"  容器名字 tomcat01 tomcat02 ,用来区分容器
            -d             后台方式运行
            -it            使用交互方式运行，进入容器查看内容
            -p             指定容器的端口   -p 8080:8080
                   -p 主机端口:容器端口 （常用）
                   -p 容器端口
                   容器端口

	        -P             随机指定端口

       测试：
           docker images
           docker run -it centos /bin/bash

           推出： exit
   1.2列出所有在运行的容器
      docker ps     列出当前正在运行的容器
      docker ps -a  列出当前正在运行的容器+曾经运行过的容器
      docker ps -n  显示最近创建的容器
      docker ps -q     只显示容器的编号
   1.3 退出容器
   　　exit　        直接容器停止并且退出
      Ctrl + P +Q 　容器不停止退出
   1.4删除容器
      docker rm 容器id                删除指定的容器，不能删除正在运行的容器，如果要强制删除，rm -f
      docker rm -f $(docker ps -aq)  删除所有容器
   1.5启动和停止容器
      docker start 容器id             启动容器
      docker restart 容器id           重启容器
      docker stop 容器id              停止当前正在执行的容器
      docker kill 容器id              强制停止当前容器
12.列出所有正在运行的进程
      docker ps -s
13.查看镜像的元数据
      docker inspect 镜像id
14.进入当前正在运行的容器
    方式一:
      docker exec -it 容器id bashshell
    方式二:
      docker attach 容器id

    区别:
    docker exec :进入容器后开启一个新的终端，可以在里面操作 （常用）
    docker attach : 进入正在运行的终端，不会启动新的进程
15.拷贝容器中的文件到宿主机
    docker cdp 容器id:容器文件路径 宿主机文件路径
    测试:
        docker cp 685a00fb5e93:/home/test.java /home

16.docker 部署nginx
    1.安装
     docker pull nginx
    2.启动
      -d:后台启动，--name:附名，宿主机端口:容器端口
      docker run -d --name nginx01 -p 3344:80 nginx
    3.本机自测
      curl localhost:3344
    4.进入nginx 容器
      docker exec -it nginx01 /bin/bash
17.docker 部署tomcat
    1.安装
    docker pull tomcat
    2.启动
    docker run -d --name tomcat01 -p 3345:8080 tomcat
    3.测试
      注意，docker命令下载的tomcat 是一个精简版，在webapps 中是没有任何项目的，我们需要将tomcat 中的webapps.dist 复制到webapps 中，用于测试
      cp -r webapps.dist/* webapps
      然后外网请求宿主机的端口，就能看到tomcat 的画面
18.可视化
    1.portainer
    docker run -d -p 8088:9000 \
    --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer

19.commit 镜像
    docker commit 提交容器成为一个新的副本

    命令和git原理类似
    docker commit -m ""
    测试
       安装,启动默认的tomcat，官方的镜像默认webapps 下是没有文件的
       cp -r webapps.dist/* webapps

       将操作过的容器通过commit提交为一个镜像，以后就可以使用我们修改过的镜像。、
       在宿主机中执行:
       docker ps
       docker commit -a "xuebingfan" -m="add webapps app" eee2599b7113 tomcat02:1.0

       如果想要保存容器的状态，就可以通过commit来提交，获得一个镜像。
 =========================================================================================================
 以上是docker 的入门的阶段
 =========================================================================================================




