redis
1.redis 概述
Redis (Remote Dictionary Server),即远程字典服务

是一个开源的使用ANSI c 语言编写、支持网络、可基于内存亦可以持久化的日志型、Key-Value数据库，并且提供多语言的API。免费的开源。是当前最热门的的NoSQL技术之一。
也被人们称之为结构化数据库。
redis 会周期的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave（主从）同步。
免费和开源！

Redis 能干什么
   1.内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb,aof）
   2.效率高，可以用于高速缓存
   3.发布订阅系统
   4.地图信息分析
   5.计时器，计数器（浏览量）

Redis的特性
   1.多样的数据类型
   2.持久化
   3.集群
   4.事务

2.安装
  2.1 windows 安装
    1.下载安装包
      https://github.com/dmajkic/redis/downloads
    2.解压到自己电脑上的环境目录

  2.2 Linux 安装
    https://www.cnblogs.com/hunanzp/p/12304622.html
3.redis 基础知识
  1.redis默认有16个数据库，模式使用的是第0个
    可以使用select 进行切换数据库
  2.清空当前数据库
    flushdb
  3.清空所有数据库内容
    flushall
  4.查看所有的key
    keys *
  5.redis 是单线程的
    redis是很快的，官方表示，Redis 是基于内存操作的，CPU 并不是性能瓶颈，redis 的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就是用单线程了。
    redis 是使用c语言写的，官方提供数据为 1000+ 的QPS ，完全不比同样使用key-value 的Memecache 差。

    Redis 为什么单线程还那么快？
    1.误区1： 高性能的服务器一定是多线程的
    2.误区2： 多线程（CPU上下文会切换）一定比单线程效率高

    核心:
    redis 是将所有的数据全部存在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作），对于内存系统来说， 如果没有上下文就是最高的，
    多次读写都是在一个CPU上的，在内存情况下，这就是最佳的方案。

4.redis-key
    1. keys * : 查看所有的key
    2. exists keyname : 判断当前的key 是否存在
    3. move keyname : 移除当前的key
    4. expire keyname : 设置key的过期时间
    5. ttl keyname : 查看当前key 的剩余时间
    6. type keyname : 查看当前key 对应value 的类型

5.String (字符串)
    省略简单的get和set 等操作
    1.自增1 : incr views

    2.自减1 : decr views

            127.0.0.1:6379> set views 0
            OK
            127.0.0.1:6379> incr views
            (integer) 1
            127.0.0.1:6379> get views
            "1"
            127.0.0.1:6379> incr views
            (integer) 2
            127.0.0.1:6379> decr views
            (integer) 1
            127.0.0.1:6379> get views
            "1"
            127.0.0.1:6379>
    3.自增步长 :incrby views 10
    4.自减步长 :decrby views 10

    5.字符串范围
      1.截取字符串: GETRANGE keyname 0 3
            127.0.0.1:6379> set name 'fanxuebing'
            OK
            127.0.0.1:6379> getrange name 0 3
            "fanx"
      2.替换指定为止开始的字符串: SETRANGE keyname 1 xx
            127.0.0.1:6379> setrange name 3 haha
            (integer) 10
            127.0.0.1:6379> get name
            "fanhahaing"

      3.设置过期时间 setex （set with expire）
      4.当不存在时设置 setnx (set if not exist)
            127.0.0.1:6379> setnx version 1.0.0
            (integer) 1
            127.0.0.1:6379> setnx version 1.0.0
            (integer) 0
            127.0.0.1:6379> get version
            "1.0.0"
      5.批量设置值
            127.0.0.1:6379> mset k1 v1 k2 v2 k3 v3
            OK
            127.0.0.1:6379> keys *
            1) "k2"
            2) "k3"
            3) "k1"
            127.0.0.1:6379> mget k1 k2 k3
            1) "v1"
            2) "v2"
            3) "v3"
      6.先获取在设置 : getset ，如果不存在值，则返回nil ,如果存在值，则获取原来的值，并设置新的值
            127.0.0.1:6379> getset db redis
            (nil)
            127.0.0.1:6379> get db
            "redis"
            127.0.0.1:6379> getset db mongodb
            "redis"

      总结：
      String 类型使用场景： value 除了可以是字符串还可以是数字
           1.计数器
           2.统计多单位的数量
           3.粉丝数
           4.对象缓存存储
6.List
    基本的数据类型，列表
    1.将一个值或多个值，插入列表头部（左） lpush list one
    2.将一个值或多个值，插入列表尾部（右） rpush list one

    3.移除list 中左边第一个值 lpop list
    4.移除list 中右边第一个值 rpop list

    5.通过下表获取list 中的某一个值
        lindex 1
        rindex 1

    6.获取列表的长度 llen list
    7.移除指定的值
        lrem list 1 one

    8.通过下标截取指定长度
        ltrim list 1 2
    9.移除列表的最后一个元素 ，将它移动到新的列表中 : rpop lpush
            127.0.0.1:6379> flushall
            OK
            127.0.0.1:6379> rpush list 'hello'
            (integer) 1
            127.0.0.1:6379> rpush list 'hello1'
            (integer) 2
            127.0.0.1:6379> rpush list 'hello2'
            (integer) 3
            127.0.0.1:6379> rpoplpush list otherlist
            "hello2"
            127.0.0.1:6379> lrange list 0 -1
            1) "hello"
            2) "hello1"
            127.0.0.1:6379> lrange otherlist 0 -1
            1) "hello2"
    10.将某个具体的value插入列表中某个元素的前面或者后面
         linsert list before "world" "other"
         linsert list after  "world" "other"

    总结：
      list 实际上是一个列表，before node after ,left ,right 都可以插入值
      如果key不存在，创建新的链表
      如果key 存在，新增内容
      如果移除了所有的值，空链表，也代表不存在
      在两边出入或者改动值，效率最高。中间元素，相对来说效率会低一点。

7.set (集合)
    set 中的值是不能重复的（无序不重复集合）

    1.想set 中添加元素 : sadd myset "hello"
    2.查看指定set 所有的值 : smembers myset
    3.判断指定值是否在set中 : smember d
     hello
    4.获取set 集合中的内容元素个数 : scard myset
    5.移除set 中的指定元素 : srem myset hello
    6.随机抽选set 中的元素 : srandmember myset
            127.0.0.1:6379> srandmember myset
            "s4"
            127.0.0.1:6379> srandmember myset
            "s1"
            127.0.0.1:6379>
            127.0.0.1:6379> srandmember myset
            "s7"
            127.0.0.1:6379> srandmember myset
            "s6"
            127.0.0.1:6379> srandmember myset
            "s4"
8.Hash(哈希)
Map集合,key-map ,本质上和String 类型没有多大的区别，还是一种简单的key-value
    1.set 一个具体的值 : hset myhash field1 fanxuebing
    2.获取一个字段 : hget myhash field1
    3.set多个字段值 : hmset myhash field1 value1 field2 value2
    4.获取多个字段值 : hmget myhash field1 field2
    5.获取全部的数据 : hgetall myhash
    6.判断hash 中的指定字段是否存在 : hexists myhash field1
    7.获取所有的字段 : hkeys myhash
    8.获取所有的值 : hvals myhash
    9.指定增量:
        hset myhash field1 5
        hincrby myhash field3 1
        hincrby myhash field3 -1

    10.如果不存在则可以设置 : hsetnx myhash field4 hello

    hash 应用场景: hash 变更的数据，user name age ，尤其是用户信息之类的，经常变动的信息。hash 更适用于对象的存储，String 更加适合字符换的存储

9.Zset (有序集合)
    在set 基础上，增加了一个值，zadd salary 1 fan 2 xue 3 bing
    1.从小到大排序 : zrange salary 0 -1
    2.移除有序集合中的指定元素 : zrem  salary xiaohong
    3.获取有序集合中的个数 : zcard salary
    4.获取指定区间之间的个数 : zcount myset 1 3

    案例思路：
        set 排序 存储班级成绩表，工资表
        普通信息 1.重要信息 2.带权重进行判断